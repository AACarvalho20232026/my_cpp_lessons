int O_MEU_NUMERO = 10 ;         //número inteiros
double O_MEU_NUMERO_REAL =10.5; //número reias
char O_MEU_CARACTER = 'a';     //caracteres
string O_MEU_TEXTO = "isto é um texto";  //texto
bool O_MEU_BOOLDEANO = true;            //booleanto
const double PI = 3.14159265389793238463; //constantes  
int x = 2, y=3 <=14
int minutosPorHora
//tipo de variavel nome da variavel = valor da variavel 
..............................................................................................................................................................................................................
int sensorTemperatura =10;
const double PI = 3.1415;

cout  << PI << " valor de PI\n";  //isto é um comentario 
    cout << sensorTemperatura << " valor sensor de temperatura\n"

    sensorTemperatura = 20;
    cout << sensorTemperatura << "valor do sensor de temperatura" << PI 
    return 0;

cout << "Digita um numero: " ;  //imprime no ecrã
   cin >> numero;                   //lê do teclado 
   cout << "O numero que digitaste foi; " << numero << endl;
#include <iostream>
using namespace std;




//tipo de variavel nome da variavel = valor da variavel 


int main()
{
      //tendo em consideração que a area do circulo
      //é PI * raio * raio, calcular a area do circulo
      //com raio 10
      const double PI = 3.14159265389793238463
      int r = 10;
      double area = PI * r * r;
   cout << a+b << endl;   //imprime no ecrã
   //cin >> numero;                   //lê do teclado 
   //cout << "O numero que digitaste foi; " << numero << endl;
   return 0;
}
const double PI = 3.14159265389793238463
      int raio;
      cout << "Qual o raio do circulo?" << endl;
      cin >> raio;
      double area = PI * raio * raio;
      int a = 4;
      int b = 5;
      int c = 2 ;
      int d = 1;
      int resultado = a+(b*c)+d;
      cout << resultado << endl;
      int resultado = a/c;
      int resultado = a%c;
int resultado = a+=2;
      cout << resultado << endl;
       resultado = a+=2 ;
      cout << resultado << endl;
...............................................................................................................................................................................................................

 #include <cmath>
#include <iostream>  //incluir uma bibliotece
#include <cmath>     //incluir uma bibliteca cheia de cenas de mat
using namespace std;

int a=2, b=3;


int main(){

   cout << max(a,b)  << endl;
   return 0;
}
#include "asminhascontas.h"
cout << log(16)  << endl;
   cout << f(2) << endl;
int f(int x){
    int resp = 2*x;
    return resp;
..............................................................................................................................................................................................................
      #include <iostream>
using namespace std;

int a = 10 , b = 12;

int main(){

    if ( a < b){
        cout << "é verdade" <<endl;

    }else{
        cout << "é mentira" << endl;
    
    }

    return 0;
..............................................................................................................................................................................................................
int a = 10 , b = 12, c = 9;

int main(){

    if ( a < b && b < c){
if ( a < b ){
        cout << "é verdade" <<endl;
    }else if (a<c){
        cout << "é verdade" <<endl;
    }else{
        cout << "é mentira" << endl;
.................................................................................................................
#include <iostream>
#include <ctime>
#include <cstdlib>

using namespace std;

int main(){

int num=0;
   srand((unsigned) time(0));
   int numSorte = 1+(rand()%100);  
   while(numSorte != num){
     cout << "Qual o número da sorte? ";
     cin >> num;
     if(numSorte > num){
     cout << "O número da sorte é maior do que: " << num << endl;
     }else if(numSorte < num){
     cout << "O número da sorte é menor do que: " << num << endl;
     }else{
     cout << "Parabéns, você acertou!" << endl;
    }
  }
cout << "Acabou o jogo!" << endl;
return 0;
}
.................................................................................................................
#include <iostream>
using namespace std;


int main(){

    for (int n=0; n<=10; n++){
        cout << n << endl;
    }

    return 0;
..............................................................................................................................................................................................................

int i = 10;
    while (1 !=10){
        cout << "ola" << endl;

do {   
        cout << "ola" << endl;
   } while (1 != 10);

cout << "inicio do ciclo For" <<endl;
for (int n=0; n<=10; n++){
    cout << n << endl;
    if (n == 4){
        break;
.............................................................................................................................................................................................................
cout << "inicio do ciclo For" <<endl;
for (int n=0; n<=10; n++){
    cout << n << endl;
    if (n == 4){
        continue;
    }    
    
}
    cout << "fim do ciclo For" << endl;
    return 0;
..............................................................................................................................................................................................................
    int main(){

    int test[4] = {7,8,9,7};   //int chave[5]
                                //int estrelas[2]
    for(int i=0; i<4; i++){
        cout << test[i] << endl;
    }


return 0;

}
.............................................................................................................................................................................................................
int main(){

   int chave[5];
    int estrelas[2];

    for(int i=0; i<4; i++){
        cout << test[i] << endl;
    }
..............................................................................................................................................................................................................
int main(){
 // indice             0        1       2       3          4
   string cars[] = {"volvo", "BMW", "ford", "mazda", "tesla"};
    cout << cars[2] << "\n";
    cars[2] = "Opel";
    cout << cars[2] << "\n";

    

    cout << cars[2] << "\n";

int main(){
 
 int numeros[] = {1,2,3,4,5};
 cout << sizeof(numeros)/4 << endl;
// cada elemento de um array = 4 bytes
.............................................................................................................................................................................................................
                                                                                   Array
    
    #include <iostream>
using namespace std;

int myArray[] = { 1, 2, 3, 4, 5 };

int main (){

    cout << myArray[4] << endl;
    cout << sizeoff(myArray)/4 << endl;

    return 0;
}
.............................................................................................................................................................................................................
                                                                                    Array
    
    #include <iostream>
using namespace std;

int myArray[] = { 1, 2, 3, 4, 5 };

string letras [2][4]; //bidimencional

string letras2[2][4] = {
    {"A","B","C","D"}, //0
    {"E","F","G","H"}  //1
    //0   1   2   3
};

int main (){

    for (int i = 0; i < 2; i++){
        for (int j = 0; j < 4; j++){
    cout << letras2[i][j] << endl;
    }
}
return 0;
}
.............................................................................................................................................................................................................
                                                                                    struct
    #include <iostream>
using namespace std;


struct
{
    string nome;
    int idade;
    string codPostal;
    string rua;
    string cidade;
    string pais;

} pessoa;

int main(){

    pessoa.nome = "Joao";
    pessoa.idade = 20;
    pessoa.codPostal = "1234-567";
    pessoa.rua = "Rua Do Joao";
    pessoa.cidade = "Porto";
    pessoa.pais = "Portugal";


}
........................................................................................................................................................................................
    int main(){

    pessoa p1, p2, p3;

    p1.nome = "Joao";
    p2.nome = "Maria";

    cout << p1.nome << endl;
    cout << p2.nome << endl;
    cout << p3.nome << endl;


}
........................................................................................................................................................................................
                                                                                        funçoes
    
    int f(int x){
    return x*x;
};

int main(){

    cout << f(5) << endl;
    cout << f(10) << endl;
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
int f(int x){
    return x*x;
};

void ola(){
    cout << "Olá!" << endl;
};

void msgError(string msg){
    cout << "------------------------" << endl;
    cout << "Erro: " << msg << endl;
    cout << "------------------------" << endl;
int main(){
    ola();

    msgError("Erro De Conexao")
    ou
texto("Olá", "Mundo", "!");

int multiplicaçao(int x, int y){
    return x*y;
}

int main(){


    cout << multiplicaçao(2,256) << endl;

int multiplicaçao(int x, int y=2){
    return x*y;
}

int main(){


    cout << multiplicaçao(2) << endl;

const int LED_RED = A5;
const int LED_YEL = A4;
const int LED_GRE = A3;
const long INTERVALO = 2000;

void setup()
{
  pinMode(LED_RED, OUTPUT);
  pinMode(LED_YEL, OUTPUT);
  pinMode(LED_GRE, OUTPUT);
}

void loop()
{
  digitalWrite(A5, HIGH);
  delay(2000);
  digitalWrite(A5, LOW);
  delay(2000);

  digitalWrite(A4, HIGH);
  delay(2000);
  digitalWrite(A4, LOW);
  delay(2000);
  
  digitalWrite(A3, HIGH);
  delay(2000);
  digitalWrite(A3, LOW);
  delay(2000);


  digitalWrite(A5, HIGH);
    delay(INTERVALO);
  digitalWrite(A5, LOW);
  digitalWrite(A4, HIGH);
    delay(INTERVALO);
  digitalWrite(A4, LOW);
  digitalWrite(A3, HIGH);
    delay(INTERVALO);
  digitalWrite(A3, LOW);
.......................................................................................
Semaforo

const int LED_RED_1 = 2;
const int LED_YEL_1 = 3;
const int LED_GRE_1 = 4;
const int LED_RED_2 = 5;
const int LED_YEL_3 = 6;
const int LED_GRE_4 = 7;

const long INTERVALO_SEG = 6000;
const long INTERVALO = 5000;

void setup()
{
  pinMode(LED_RED_1, OUTPUT);
  pinMode(LED_YEL_1, OUTPUT);
  pinMode(LED_GRE_1, OUTPUT);
  pinMode(LED_RED_2, OUTPUT);
  pinMode(LED_YEL_3, OUTPUT);
  pinMode(LED_GRE_4, OUTPUT);
}

void loop()
{
  digitalWrite(LED_RED_1, HIGH);
  digitalWrite(LED_RED_2, HIGH);
  delay(INTERVALO);
  digitalWrite(LED_RED_1, LOW);
  digitalWrite(LED_RED_2, LOW);

  digitalWrite(LED_YEL_1, HIGH);
  digitalWrite(LED_YEL_3, HIGH);
  delay(INTERVALO);
  digitalWrite(LED_YEL_1, LOW);
  digitalWrite(LED_YEL_3, LOW);

  digitalWrite(LED_GRE_1, HIGH);
  digitalWrite(LED_GRE_4, HIGH);
  delay(INTERVALO_SEG);
  digitalWrite(LED_GRE_1, LOW);
  digitalWrite(LED_GRE_4, LOW);
}
...............................................................................................................
int val = analogRead(A1);
  val = map(val, 0, 1023, 255, 0);
  analogWrite(3, val);
...........................................................................
Reference

//Reference is an alias for a variable
string food = "Pizza";
//Create a Reference variable
string &meal = food;
int main(){
    cout << food << "\n";
    cout << &food << "\n";
    cout << meal << "\n";
    cout << &meal << "\n";
    
    return 0;
}
........................................................................................................
pointer

int main(){
    string food = "Pizza";
    string *ptr = &food;
    cout << food << "\n";
    cout << &food << "\n";
    cout << ptr << "\n";
    cout << *ptr << "\n";
    cout << &ptr << "\n";
.............................................................
revisoes 

#include <iostream>
using namespace std;

int main(){

    int x = 1;
    int y = 2;
    cout << x << "\n";
    x +=2;
    cout << x << "\n";
    cout << (x!=y) << "\n";
    cout << (x==y) << "\n";

     //   &&        ||   !   == ! < > <= >=
   // comparacao    ou   neg

    string nomea = "Paulo ";
    string nomeb = "Leite";
    cout << nomea+nomeb << "\n";

}
cout << round(10.4) << "\n";
....................................
funcoes

int somaNumeros(int x, int y){
return x+y;
}

double somaNumeros (double x, double y){
    return x+y;
}

int soma(int k){
    if (k>0){
            return k+ soma(k - 1);
        }else{
            return 0;
        }
}



int main(){

    cout << somaNumeros(2.2,6.4) << "\n";
    return 0;

}
.........................................
//int: 4 bytes (32 bits) 00000000 00000000 00000000 00000000
// char: 1 byte (8 bits) 00000000
// bool : 1 byte (8 bits) 00000000 (false) 00000001 (true)
// float: 4 bytes (32 bits) 00000000 00000000 00000000 00000000
// double: 8 bytes (64 bits) 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
#include <iostream>
#include <fstream>
#include <vector>
#include <cstdlib>
#include <ctime>
#include <algorithm>

using namespace std;

// Função para gerar números aleatórios
int gerarNumeroAleatorio(int min, int max) {
    return rand() % (max - min + 1) + min;
}

// Função para criar um cartão de bingo
vector<vector<int>> criarCartaoBingo() {
    vector<vector<int>> cartao(5, vector<int>(5, 0));

    for (int i = 0; i < 5; ++i) {
        for (int j = 0; j < 5; ++j) {
            int numero;
            do {
                numero = gerarNumeroAleatorio(j * 15 + 1, (j + 1) * 15);
            } while (find(cartao[i].begin(), cartao[i].end(), numero) != cartao[i].end());
            cartao[i][j] = numero;
        }
    }

    return cartao;
}

// Função para mostrar um cartão de bingo
void mostrarCartao(const vector<vector<int>>& cartao) {
    for (int i = 0; i < 5; ++i) {
        for (int j = 0; j < 5; ++j) {
            if (cartao[i][j] == 0) {
                cout << "   ";
            } else {
                cout << (cartao[i][j] < 10 ? " " : "") << cartao[i][j] << " ";
            }
        }
        cout << endl;
    }
}

// Função para salvar um cartão em um arquivo
void salvarCartao(const vector<vector<int>>& cartao, int numeroCartao) {
    ofstream arquivo("cartao_" + to_string(numeroCartao) + ".txt");

    for (int i = 0; i < 5; ++i) {
        for (int j = 0; j < 5; ++j) {
            arquivo << (cartao[i][j] == 0 ? "X" : to_string(cartao[i][j])) << " ";
        }
        arquivo << endl;
    }

    arquivo.close();
}

int main() {
    srand(static_cast<unsigned int>(time(nullptr)));

    int opcaoSorteio;
    cout << "Escolha o tipo de sorteio (75, 90 ou 100): ";
    cin >> opcaoSorteio;

    vector<int> numerosSorteados;
    int opcao;
    cout << "Escolha o modo de sorteio (0 - Automático, 1 - Manual): ";
    cin >> opcao;

    int numeroAnterior = -1;

    while (true) {
        int numeroSorteado;

        if (opcao == 0) {
            numeroSorteado = gerarNumeroAleatorio(1, opcaoSorteio);
        } else {
            cout << "Pressione qualquer tecla para sortear um novo número...";
            cin.ignore();
            cin.get();
            numeroSorteado = gerarNumeroAleatorio(1, opcaoSorteio);
        }

        // Exibir números sorteados
        cout << "Número sorteado: " << numeroSorteado << endl;
        cout << "Número anterior: " << numeroAnterior << endl;

        numerosSorteados.push_back(numeroSorteado);
        sort(numerosSorteados.begin(), numerosSorteados.end());

        cout << "Números sorteados: ";
        for (int num : numerosSorteados) {
            cout << num << " ";
        }
        cout << endl;

        numeroAnterior = numeroSorteado;

        // Criar cartões de bingo
        int numeroCartoes;
        cout << "Quantos cartões de bingo desejas gerar? ";
        cin >> numeroCartoes;

        for (int i = 1; i <= numeroCartoes; ++i) {
            vector<vector<int>> cartao = criarCartaoBingo();
            mostrarCartao(cartao);
            salvarCartao(cartao, i);
        }
    }

    return 0;
}
....................
#include <iostream>
#include <iomanip>
#include <cstdlib>
#include <ctime>
#include <unistd.h>

using namespace std;

const int numLinhasCartao       = 5;
const int numColunasCartao      = 5;
const int numColunasPainel      = 20:
const int intervaloEntreBolas   = 500000;
const int msgPause              = 2000000;

int sorteados           = 0;
int numeroSorteado      = 0;
int anterior            = 0;

int numeroDeBolas, tipoSorteio , numeroDeCartoes;

string red          = "\u001b[31m";
string blue         = "\u001b[34m";
string green        = "\u001b[32m";
string reset        = "\u001b[0m";
string bold         = "\u001b[1m";

typedef struct {
    int numero;
    bool sorteado;
} bingoPainel;

bingoPainel bingo[] = {};

void CenterString(string mensagem){
    int l = mensagem.length();
    int pos = (int) ((numColunasPainel*3 - (l)) / 2);
    for (int i = 0; i < pos; i++){
        cout << " ";
    }
    cout << blue;
    cout << mensagem << reset;
    cout << blue << endl;
}

void initArray(){
    for (int i = 0; i <= numeroDeBolas; i++){
        bingo[i].numero = i+1;
        bingo[i].sorteado = false;
    }
}
    
void opcoes(){
    tipoSorteio = 0;

    while (tipoSorteio != 1 && tipoSorteio != 2 && tipoSorteio != 3 && tipoSorteio != 4){
    system("clear || cls");
    cout << blue << bold
                << "M E N U   P R I N C I P A L\n " << reset << blue
                << "----------------------------" << endl
                << "1 - Sorteio Manuel\n"
                << "2 - Sorteio Automático\n"
                << "3 . Gerar cartoes\n"
                << "4 - Sair\n"
                << "............................" << endl
                << bold << "Opção: " << reset << blue;
            cin >> tipoSorteio;
    }
}

void showOption(){
    if (tipoSorteio < 1 || tipoSorteio > 4){


    }


}
....................
#include <iostream>
#include <cstdlib> // Para a função rand()

using namespace std;

// Função para preencher uma matriz quadrada de inteiros com valores aleatórios
void preencherMatrizAleatoria(int** matriz, int ordem) {
    for (int i = 0; i < ordem; ++i) {
        for (int j = 0; j < ordem; ++j) {
            matriz[i][j] = rand() % 100; // Gera valores aleatórios entre 0 e 99
        }
    }
}

// Função para encontrar a linha com o menor valor na matriz
int encontrarLinhaComMenorValor(int** matriz, int ordem) {
    int menorValor = matriz[0][0];  // Assume que o primeiro elemento é o menor
    int linhaMenorValor = 0;

    for (int i = 0; i < ordem; ++i) {
        for (int j = 0; j < ordem; ++j) {
            if (matriz[i][j] < menorValor) {
                menorValor = matriz[i][j];
                linhaMenorValor = i;
            }
        }
    }

    return linhaMenorValor + 1; // Adiciona 1 para exibir a linha no formato convencional (começando em 1)
}

int main() {
    // Solicita ao usuário a ordem da matriz (número de linhas e colunas)
    int ordem;
    cout << "Digite a ordem da matriz quadrada: ";
    cin >> ordem;

    // Aloca dinamicamente a matriz
    int** matriz = new int*[ordem];
    for (int i = 0; i < ordem; ++i) {
        matriz[i] = new int[ordem];
    }

    // Preenche a matriz com valores aleatórios
    preencherMatrizAleatoria(matriz, ordem);

    // Chama a função para encontrar a linha com o menor valor
    int linhaMenorValor = encontrarLinhaComMenorValor(matriz, ordem);

    // Imprime a matriz gerada
    cout << "Matriz gerada automaticamente:" << endl;
    for (int i = 0; i < ordem; ++i) {
        for (int j = 0; j < ordem; ++j) {
            cout << matriz[i][j] << " ";
        }
        cout << endl;
    }

    // Imprime o resultado
    cout << "A linha com o menor valor é a linha " << linhaMenorValor << "." << endl;

    // Libera a memória alocada para a matriz
    for (int i = 0; i < ordem; ++i) {
        delete[] matriz[i];
    }
    delete[] matriz;

    return 0;
}

array tridimensional para cartoes
int cartoes[numeroDeCartoes][numLinhasCartao][numColunasCartao];
.........................................................................
/**
 * Crie um programa capaz de multiplicar uma
 * matriz bidimensional de inteiros por
 * um dado número e criar uma nova matriz com o
 * produto
 * 
*/
...............................................................................
#include <iostream>
#include <stdio.h>
#include <stdlib.h>

using namespace std;

int main(){
   // printf("teste\n");
   // printf("Characters: %s %s %s \n", "ey", "ty", "teste");
   // printf ("Decimals: %d %ld\n", 1977, 650000L);            // converte um int decimal para float/double porque excede o num 9
   // printf ("Preceding with blanks: %10d \n", 1977);         // vai imprimir 10 espaços e dps o numero solicitado que neste caso é o 1977
   // printf ("Width trick: %*d \n", 10, 10);                  // vai imprimir "X" Espaços de acordo com o parametro fornecido e depois da print de um nemero
    
    char nome[50];
    string str;
    int i;

   

   // printf("Nome: ");            
   // scanf("%s", nome);              // vai receber uma string "%s" e dps de receber esse valor vai mandar pra variavel sugerida "nome"
   // printf("Ola %s\n", nome);       // vai dar um output no qual vai esperar uma string e dps esse valor e atribuido pela variavel nome
 
    system("clear")
   

    printf("Enter your family name:  ");
    scanf ("%s",str);
    printf("Enter your age  ");
    scanf ("%d", &i);
    printf ("Mr. %s , %d years old.\n", str, i );

    /*
    d or i-	Signed decimal integer - 392
    u-	Unsigned decimal integer  -	7235
    o-	Unsigned octal - 610
    x-	Unsigned hexadecimal integer -	7fa
    X-	Unsigned hexadecimal integer (uppercase) -	7FA
    f-	Decimal floating point, lowercase -	392.65
    F-	Decimal floating point, uppercase -	392.65
    e-	Scientific notation (mantissa/exponent), lowercase - 3.9265e+2
    E-	Scientific notation (mantissa/exponent), uppercase - 3.9265E+2
    g-	Use the shortest representation: %e or %f - 392.65
    G-	Use the shortest representation: %E or %F - 392.65
    a-	Hexadecimal floating point, lowercase -	-0xc.90fep-2
    A-	Hexadecimal floating point, uppercase -	-0XC.90FEP-2
    c-	Character -	'a'
    s-	String of characters -	"sample"
    p-	Pointer address  -	b8000000
    n-	Nothing printed.
    {The corresponding argument must be a pointer to a signed int.
    {The number of characters written so far is stored in the pointed location.	
    %-	A % followed by another % character will write a single % to the stream. -	%
    
    
    
    
    
    
    
    
    */
    
}
....................................................................................................................................
#include <iostream>

using namespace std;

void soma(int a, int b) {
    cout << a + b << endl;
}

void multi(int a, int b) {
    cout << a * b << endl;
}

void divi(int a, int b) {
    if (b != 0) {
        cout << a / b << endl;
    } else {
        cout << "Error: Cannot divide by zero." << endl;
    }
}

void Rest(int a, int b) {
    if (b != 0) {
        cout << a % b << endl;
    } else {
        cout << "Error: Cannot find the remainder for division by zero." << endl;
    }
}

void menu() {
    system("clear");  // Corrected syntax for clearing the screen
    cout << "====================" << endl;
    cout << "          MENU" << endl;
    cout << "====================" << endl;
    cout << "1 - soma" << endl;
    cout << "2 - multiplicacao" << endl;
    cout << "3 - divisao" << endl;
    cout << "4 - resto da divisao" << endl;
    cout << "====================" << endl;
}

int getOpcao() {
    int opcao;
    cout << "Digite a sua opcao: ";
    cin >> opcao;

    return opcao;
}

int getValorX() {
    int x;
    cout << "Digite o valor de x: ";
    cin >> x;

    return x;
}

int getValorY() {
    int y;
    cout << "Digite o valor de y: ";
    cin >> y;

    return y;
}

void executaCalculo(int opcao, int x, int y) {
    switch (opcao) {
        case 1:
            soma(x, y);
            break;

        case 2:
            multi(x, y);
            break;

        case 3:
            divi(x, y);
            break;

        case 4:
            Rest(x, y);
            break;

        default:
            cout << "Opcao invalida." << endl;
    }
}

int main() {
    int a, b, opcao;
    menu();
    opcao = getOpcao();
    a = getValorX();
    b = getValorY();
    executaCalculo(opcao, a, b);

    return 0;
}
.......................................................................
#include <iostream>

using namespace std;

void soma(int a, int b) {
    cout << a + b << endl;
}

void multi(int a, int b) {
    cout << a * b << endl;
}

void divi(int a, int b) {
    if (b != 0) {
        cout << a / b << endl;
    } else {
        cout << "Error: Cannot divide by zero." << endl;
    }
}

void Rest(int a, int b) {
    if (b != 0) {
        cout << a % b << endl;
    } else {
        cout << "Error: Cannot find the remainder for division by zero." << endl;
    }
}

void menu() {
    system("clear");  // Corrected syntax for clearing the screen
    cout << "====================" << endl;
    cout << "          MENU" << endl;
    cout << "====================" << endl;
    cout << "1 - soma" << endl;
    cout << "2 - multiplicacao" << endl;
    cout << "3 - divisao" << endl;
    cout << "4 - resto da divisao" << endl;
    cout << "====================" << endl;
}

int getOpcao() {
    int opcao;
    cout << "Digite a sua opcao: ";
    cin >> opcao;

    return opcao;
}

int getValorX() {
    int x;
    cout << "Digite o valor de x: ";
    cin >> x;

    return x;
}

int getValorY() {
    int y;
    cout << "Digite o valor de y: ";
    cin >> y;

    return y;
}

void executaCalculo(int opcao, int x, int y) {
    switch (opcao) {
        case 1:
            soma(x, y);
            break;

        case 2:
            multi(x, y);
            break;

        case 3:
            divi(x, y);
            break;

        case 4:
            Rest(x, y);
            break;

        default:
            cout << "Opcao invalida." << endl;
    }
}

int main() {
    int a, b, opcao;
    menu();
    opcao = getOpcao();
    a = getValorX();
    b = getValorY();
    executaCalculo(opcao, a, b);

    return 0;
}
..............
#include <iostream>

using namespace std;

void calculos(){
    int a, b;
    double r;
    const double PI = 3.1416;

    do {
        cout << "Type a number: ";
        cin >> a;
        if (a <= 0){
            cout << "You must type a number bigger than 0!" << endl;
        }
    } while (a <= 0);

    do{
        cout << "Type another number: ";
        cin >> b;
        if (b <= 0){
            cout << "You must type a number bigger than 0!" << endl;
        }
    } while (b <= 0);

    cout << "Sum: " << a + b << endl;
    cout << "Difference: "<< a - b << endl;
    cout << "Multiplication: " << a * b << endl;
    cout << "Division: "<< a / b << endl;
    cout << "Rest of Division: " << a % b << endl;

    cout << "Type the value of the radius: ";
    cin >> r;
    cout << "The area of the circle: " << PI * (r * r) << endl;

}


void notas(){

    int nums[10] = {10, 5, 9, 4, 92, 52, 62, 16, 81, 44};
    float grades[5], high_comparision_num = grades[0], low_comparision_num = grades[0], high_comparision_num_2 = nums[0], low_comparision_num_2 = nums[0], Average, Average_2, sum = 0, sum_2 = 0;
    
    
    for(int g = 0 ; g < 5 ; g++){
        cout << "Type the grade for student " << g + 1 << ": ";
        cin >> grades[g];
        sum += grades[g];
        Average = sum / 5;
    }
    cout << "Average grade: " << Average << endl;

    for(int x = 0 ; x < 5 ; x++){
        if(grades[x] > high_comparision_num){
            high_comparision_num = grades[x];
        }
    }
    cout << "Highest grade: " << high_comparision_num << endl;

    for(int x = 0 ; x < 5 ; x++){
        if(grades[x] < low_comparision_num){
            low_comparision_num = grades[x];
        }
    }
    cout << "Lowest grade: " << low_comparision_num << endl;

    for(int g = 0 ; g < 10 ; g++){
        sum_2 += nums[g];
        Average_2 = sum_2 / 10;
    }
    


    for(int x = 0 ; x < 10 ; x++){
        if(nums[x] < low_comparision_num_2){
            low_comparision_num_2 = nums[x];
        }
    }


    for(int x = 0 ; x < 10 ; x++){
        if(nums[x] > high_comparision_num_2){
            high_comparision_num_2 = nums[x];
        }
    }

    cout << endl;
    cout << "Average grade: " << Average_2 << endl;
    cout << "Highest grade: " << high_comparision_num_2 << endl;
    cout << "Lowest grade: " << low_comparision_num_2 << endl;

}

void tabuada(){
    int n;
    cout << "Chose a number: ";
    cin >> n;

    for(int x = 1; x <= 10; x++){
        cout << x << " * " << n << " = " << x * n << endl;
    }
}

void menu(){
    int option;

    cout << "=======================" << endl;
    cout << "          MENU" << endl;
    cout << "=======================" << endl;
    cout << "Chose an option:\n";
    cout << "1. Calculator \n2. Grades \n3. Multiplication Table \n";
    cin >> option;

    switch (option){
        case 1:
            calculos();
            break;

        case 2:
            notas();
            break;
        
        case 3:
            tabuada();
            break;;

        default:
            cout << "You must type a number between 1-3 !\n";
            break;

    } 
}



int main(){
    
    menu();
    return 0;
}
........................................
cast 
/*
c++ program to demonstrate casting
*/

#include <iostream>
using namespace std; 

void showASCIITable() {
    for (int x = 0; x <= 255; x++){
        cout << "Valor: " << x << " , caracteres: " << (char)x << endl;
    }
}

int main() {

    int i = 10;
    float f = 3.14;
    char c = 'a';

    //cast implicito
    float f2 = i;   // tipo uma variavel dupla
    char c2 = i;

    cout << "f2: " << f2 << endl;
    cout << "c2: " << c2 << endl;

    //cast explicito
    int i2 = (int)f; //vais fazer uma cast para um inteiro num float   
    // int i2 = int(f); mesma coisa
    int i3 = (int)c; //vais fazer uma cast para um inteiro num char

    //cast de um inteiro para um char
    char c3 = (char)i; 

    cout << "i2: " << i2 << endl;
    cout << "i3: " << i3 << endl;

    return 0;
}
..............................
ascii table
/*
c++ program to demonstrate casting
*/

#include <iostream>
using namespace std; 

void showASCIITable() {
    for (int x = 20; x <= 255; x++){
        cout << "Valor: " << x << " , caracteres: " << (char)x << endl;
    }
}

int main() {

    showASCIITable();

    return 0;
}
................................................
            Revisoes cast 
#include <iostream>

using namespace std;

int main(){

int i = 1;
float f = 2.1;

float f2 = i;
float x = (float)i;
cout << (int)f << endl;

string frase = "Ola este é o meu cast " + to_string(f);
//cout << (float)i*f << endl;
   // int xpto = 1;
    //string n = to_string(xpto) << endl;

int xpto1 = 1;
int xpto2 = 2;
string xpto3 = "Ola Mundo";

cout << xpto1+xpto2 << endl;
cout << to_string(xpto1) + to_string(xpto2) << endl;
---------------------------------------
#include <iostream>
using namespace std;

const float PI = 3.1415; // CONSTANTE GLOBAL
float xpto = 2.3;        // variavel global

int teste(int x){
    //const int xpto = 3;
    
    return xpto;
}

int main (){
    //int x = teste();
    //cout << x<< endl;
    cout << teste()*teste() << endl;
}
--------------------------------------
A palavra-chave static pode ser usada para declarar variáveis
​​e funções em escopo global, escopo de namespace e escopo de classe.
Variáveis ​​estáticas também podem ser declaradas em escopo local.
Duração estática significa que o objeto ou variável é alocado quando
o programa é iniciado e desalocado quando o programa termina.
-------------------------------------------
#include <iostream>
using namespace std;

//const float PI = 3.1415; // CONSTANTE GLOBAL
//float xpto = 2.3;        // variavel global

const float PI = 3.1415;

int teste(){
   int xpto = 3;
   //static int xpto = 3; // mesmo endereco de memoria
    return xpto;
}

int main (){
    //int x = teste();
    //cout << x<< endl;
    cout << teste()*teste() << endl;
}
.------------------------------------------
#include <iostream>
using namespace std;


int main (){

    for(int n=0; n<=10; n++){
        cout << n << endl;
    }
    int x=0;
    while (x<=10) {
        cout << x << endl;
        x++;
        /* code */
    }
    
}
...........................

#include <iostream>

using namespace std;

int x = 10;

namespace xpto{
    void func()  {
  
    cout << "xpto1" << endl;
    }   
    namespace xpto2{   //nasted Nested Loop in C++ When one loop resides inside another loop is called nesting. When we loop two loops together, i.e. kind of nesting, then the outer loop takes control of the number of times the inner loop works and takes care of all manipulation and computation.
        void func(){
            cout << "xpto2" << endl;
        }
    }
}




namespace first_space // declara namespace / isola namespace do resto do codigo
{
    void func()
    {
        cout << "Inside first_space" << endl;
    }
}

namespace second_space
{
    void func()
    {
        cout << "Inside second_space" << endl;
    }
}

using namespace xpto ;

int main ()
{
    cout << x << endl;
    
    xpto::func();
    second_space::func();
    first_space::func();
    return 0;
}
.......................................................

#include <iostream>

using namespace std;

namespace a{
    int x = 20;
    void func(){
        cout << "xpto" << endl;
    }

    namespace b{
        void func(){
            cout << " f1 Inside first_space" endl;
     }
    }
}
int x = 10;

namespace xpto{
    void func()  {
  
    cout << "xpto1" << endl;
    }   
    namespace xpto2{   //nasted Nested Loop in C++ When one loop resides inside another loop is called nesting. When we loop two loops together, i.e. kind of nesting, then the outer loop takes control of the number of times the inner loop works and takes care of all manipulation and computation.
        void func(){
            cout << "xpto2" << endl;
        }
    }
}

namespace first_space // declara namespace / isola namespace do resto do codigo
{
    void func()
    {
        cout << "Inside first_space" << endl;
    }
}

namespace second_space
{
    void func()
    {
        cout << "Inside second_space" << endl;
    }
}

using namespace xpto ;

int main ()
{
    cout << xpto::x << "\n";
    return 0;
}
-----------------------------------------------------
int RMotorA = 5
int RMotorB = 10;
int LMotorA = 8;
int LMotorB = 9;

int IR1 = 25;
int IR2 = 26;
int IR3 = 27;
int IR4 = 28;
int IR5 = 29;
int IR6 = 39;

int Ir1Reading, Ir2Reading, Ir3Reading, 
Ir4Reading, Ir5Reading, Ir6Reading;

void updateSensorState(){
    Ir1Reading = digitalRead(IR1);
    Ir2Reading = digitalRead(IR2);
    Ir3Reading = digitalRead(IR3);
    Ir4Reading = digitalRead(IR4);
    Ir5Reading = digitalRead(IR5);
    Ir6Reading = digitalRead(IR6);
}

void forward(int speedR, int speedL){
    analogWrite(RMotorA, speedR);
    analogWrite(RMotorA, 0);
    analogWrite(LMotorB, speedL);
    analogWrite(LMotorB, 0); 
}

void stop(){
    analogWrite(RMotorA, 0);
    analogWrite(RMotorA, 0);
    analogWrite(LMotorB, 0);
    analogWrite(LMotorB, 0); 

}

void fallowLine(){

    if(Ir1Reading == 1 && Ir2Reading == 1 &&
       Ir3Reading == 0 && Ir4Reading == 0 && 
       Ir5Reading == 1 && Ir6Reading == 1 &&){
        forward(40,40);
       }
    if(Ir1Reading == 1 && Ir2Reading == 1 &&
       Ir3Reading == 0 && Ir4Reading == 0 &&
       Ir5Reading == 1 && Ir6Reading == 1 &&){
        forward(40,80);
       }
    if(Ir1Reading == 0 && Ir2Reading == 0 &&
       Ir3Reading == 1 && Ir4Reading == 1 &&
       Ir5Reading == 1 && Ir6Reading == 1 &&){
        forward(40,80);
       }
}



void setup(){

}
..........................
/*
 _     _____     ___     ____  ____  ___ __  __ _____ ___ ____   ___  
| |   | ____|   / _ \   |  _ \|  _ \|_ _|  \/  | ____|_ _|  _ \ / _ \ 
| |   |  _|    | | | |  | |_) | |_) || || |\/| |  _|  | || |_) | | | |
| |___| |___   | |_| |  |  __/|  _ < | || |  | | |___ | ||  _ <| |_| |
|_____|_____|   \___/   |_|   |_| \_\___|_|  |_|_____|___|_| \_\\___/ 
                                                                    
  ____ ___  __  __ __  __ _____ _   _ _____ 
 / ___/ _ \|  \/  |  \/  | ____| \ | |_   _|
| |  | | | | |\/| | |\/| |  _| |  \| | | |  
| |__| |_| | |  | | |  | | |___| |\  | | |  
 \____\___/|_|  |_|_|  |_|_____|_| \_| |_| 
 */
// Está ai oque o prof pediu mais ou menos explicado em codigo so nao tem os cast
// O codigo funciona ao ser executado mas nao esta funcional, é apenas um codigo para lerem de exemplo



// estrutura basica

#include <iostream>

//namespace std;
using namespace std;

// variavel global/ array global e dimensional
int var[2][2] = {{1,2},{3,4}};
// const global
const int con = 20;

void funcaofor(){
    for (int i = 0; i < 2; i+=1)// soma e armazena na variavel (i+=1) o mesmo que a iteração
    {
        for (int f = 0; f < 2; f++ )// iteração (f++)
        {
            cout << var[i][f] << "\n"; // 2 for que lêm os valores do array bidimensional um para a linha outro para a coluna
        }
    
    }
    
}
// operações basicas *, /, +, -, %2(resto da divisão por 2)
// função de operaçoes basicas que vai dar return do valor c, 
int funcao2(int a, int b){// parametros, é obrigatorio declarar o valor destas variaveis quando esta função for declarada no main
    int c = a+b;
    return c;
    
}
void funcswitch(){
    int parametroif = 0; // é sempre bom declarar as variaveis como zero para eleminarem os valores armazenados caso tenham para nao dar erros no programa
    int switchcase = 0;
    cout << "qual o valor de switch case: 1/2: ";
    cin >> switchcase;
    switch (switchcase) // o que ele ira analisar, funcionamento parecido ao if, else if, e else sendo o else o default;
    {
    case 1:
        parametroif = 0;
        while (true) // enquanto while for = true o codigo se repetirá
        {   
            cout << "valor de parametroif: " << parametroif << "\n";
            if (parametroif == 3)
            {
                break;// da para dar break em whiles tbm, da pra dar break em todos os ciclos, ele para o ciclo
            }
            parametroif++;
        }
        break; // break para o codigo apos o case ser executado
    case 2:
        parametroif = 0;
        do // faz e so depois verifica se é verdade se nao for faz uma vez e para
        {
            {
            if (parametroif == 3) 

                break;
            }
            parametroif++; // iteração
        }while (true);
        break;
    default:
        cout << "default" << endl;
        break;
    }
    
}

int main(){
    //invocação das variaveis
    funcaofor();
    cout << funcao2(10, 5) << endl;// 10 é a varialvel "a" e 5 é a variavel "b"
    funcswitch();

    return 0;
}
-------------------------------------------------------------------------------------
int soma (int lista[]){

float soma = 0;
for (int i = 0; i < 5; i++){
    soma += list[i];
}
return (int)soma;

}
----------------------------------------------------------------------------------

float soma (float x , float y = 10.2){



    return x+y;
}
---------------------------------------------------------------------------------------
int soma (int x , int y){
    return x + y;
}

float soma (float x , float y){
    return x + y;
}

double soma (double x , double y){
    return x + y;
}
--------------------------------------------------------------------------------------------
overtune

int soma (int x , int y){
    return x + y;
}

float soma (float x , float y){
    return x + y;
}

double soma (double x , double y){
    return x + y;
}
................................................................
 scope
int x = 0;

int soma (){
    int y = x + 1;
    return y;
}

int main(){
    cout << soma() << endl;
    return 0;
}
-------------------------------------------------------------------
 recursamento
int sum(int k){
 if (k > 0) {
    return k + sum (k - 1);
 } else {
    return 0;
 }
}

int main() {
    int result = sum(10);
    cout << result;
    return 0;
}
------------------------------------------------------------------------
//object 
class Carro{
public:                       // access specifier
    int anos;                // attribute (int variable)
    string marca;             // atribute (string variable)
    void setvelocidade(int v){
        velocidade = v;
    }

private:
    int velocidade; // attribute (int variable)
    void setVelMedia(int vm){
        int velMedia = vm;
    }

};

int main(){

    Carro carro1;
    carro1.setvelocidade(100);
    carro1.anos = 15;
    carro1.marca = "Ford";

    return 0;
}
---------------------------------------------------------------------------------------------------
__________________________________Inicio _______________________________         CRUD                    
         |                          db                |                |
                                                                       |
        sim                                          nao               |
         |                                             |               |
        MENU                                   no          yes         |
    (listagem)                                   |           |         |
     
   (id)                                        exit        criar db  _ |
    consultar                                                          

_________________________________________________
c.s.v
10,feijao , 10 , 2.0

cost_produtos id

->indice
->nome
->preço
->quantidade
 status (a - ativo, d - apagado , o, out of stock , )
____________________________________________________
menu
listar produtos
consultar um indice em especifico (product_id)
ex:
pode exitir ou nao 17(input)
      |         |
    mostrar    exit

UPDATE =/= DELETE

tip : db todo para array e alterar por lá

----------------------------------------
  !!!!!!!!!! ESTUDAR A LEITURA E ESCRITA DE FICHEIROS!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!! FAZER FICHEIRO PEQUENO A PARTE PARA TESTES!!!!!!!!!!!!!!!!!!
----------------------------------------------------------------------------------------
Classe sempre em Letra grande
objeto :

metodo(verbos) - ligar , andar

atributos(adjetivos/caracteristicas) - cor , 4 portas

publico - quando instanciar(criar objeto apartir da classe) o objeto vou ter logo acesso direto ao metodos e atributos publicos

private -

tip : string é uma classe (conjunto de char)

trabalho : desenhe classe chamada fatura (atributos - int numero , string nome , int c.c(contribuinte) , valor ) e metedos (criar fatura , inprimir fatura no ecra )

class Bolo{
 private:
    double TempoiCoz;
    double

this->ingredientes[] = ingredientes [] // segundo ingrediente diz os parametros

estancia de uma class é um obj

THIS: serve para dizer que a variavel esta dentro da funcao
PUBLIC: os membros são acessíveis de fora da classe
PRIVATE: membros não podem ser acessados  (ou visualizados) de fora da classe
PROTECTED: significa que não é acessivel de fora mas a classe filha tem acesso
ENCAPSULAMENTO: serve para proteger os daods para nao serem anulados


computador
metedo : 
-ligar/desligar bool  /  Publico
-reniciar  /  Publico
-abrir tampa  /  Publico
-executar um programa  /  Publico
-inicar s.o  /  Privado  -> construct
-iniciar gpu  /  Privado -> construct
-remover ficheiro  /  Privado
- inputs  /  publico = dados de fora pra dentro
-formatar  /  Privado
-abrir pastas  /  Privado

atributos:  all private  struct
-RAM
-placa grafica
-cpu
-psu
-caixa
-motherboard
-disco rigido
-dispositivos externos
-fans

Hardware -> constructor
-------------------------------------------------------
#include <iostream>
using namespace std;

struct hardware{
    string ram;
    string gpu;
    string cpu;
    string psu;
    string caixa;
    string mb;
    string hd;
    string fans;
    char perifericos[5];
};

class Computer {

    private:

        hardware computer;
        bool state;

        void Formatar(){
            cout << "O computador vai ser formatado!" << endl;
        };

        void AbrirPasta(){
            cout << "A pasta do computador foi aberta!" << endl;
        };

        void IniciarSO(){
            cout << "O sistema operativo esta a ser iniciado!" << endl;
        };

        void IniciarGPU(){
            cout << "A placa grafica esta a ser iniciada!" << endl;
        };

        void RemoverFicheiro(){
            cout << "O ficheiro vai ser removido" << endl;
        };

        void listarHardware(){
            cout << endl;
            cout << "Hardware do computador: " << endl;
            cout << "RAM: " << computer.ram << endl;
            cout << "GPU: " << computer.gpu << endl;
            cout << "CPU: " << computer.cpu << endl;
            cout << "PSU: " << computer.psu << endl;
            cout << "Caixa: " << computer.caixa << endl;
            cout << "MotherBoard: " << computer.mb << endl;
            cout << "Disco: " << computer.hd << endl;
            cout << "FANs: " << computer.fans << endl;
            cout << "Perifericos" ;
            for(int i = 0; i < 5 ; i++){
                cout << "\t";
                cout << computer.perifericos[i];
            }
            cout << endl;
            cout << endl;
        }
    public:

        Computer(hardware hardware){  // constructor

        this->computer = hardware; // ocultar oq esta dentro da classe
        this->state = false;
        cout << "O computador foi instanciado com sucesso! tem de ligar..\n";
        listarHardware();
 
       }

       void Ligar(){
            if(state){
                cout << "O computador ja esta ligado!" << endl;
            }else{
                cout << "O computador vai ligar" << endl;
                this->state = true;
            }
       };

       void Desligar(){
        if(state){
            cout << "O computador ja esta desligado!"
            this->state = false;
        }else{
            cout << "O computador ja esta desligado!"
        }
       };

       void Reset(){
            if(state){
                cout << "O computador vai ser reiniciado!" << endl;
            }else{
                cout << "O computador vai nao esta ligado!" << endl;
            }
        };

        void AbrirTampa(){
            cout << "A tampa do computador foi aberta!" << endl;
        };

        void Executar(int opt){

            switch (opt){
            case 1:
                if(state){
                    Formatar();
                }else{
                    cout << "O computador nao esta ligado!" << endl;
                }
                break;
                case 2:
                if(state){
                    AbrirPasta();
                }else{
                    cout << "O computador nao esta ligado!" << endl;
                }
                break;
                case 3:
                if(state){
                    RemoverFicheiro();
                }else{
                    cout << "O computador nao esta ligado!" << endl;
                }
                break;
            default:
                cout << "Opçao invalida!" << endl;
                break;
            }
        };

        void Inputs(string input){
            if(state){
                cout << "O computador esta a receber o input: "; << endl;
            }else{
                cout << "O computador nao esta ligado!" << endl;
            }
        };
};

int main(){

    hardware hardware1 = {"16GB", "RTX 3090", "i9 10900k", "1000W", "Corsair 4000D", "ASUS ROG strix z490-e", "1TB SSD", "Corsair LL120",{'M','K','R','J','L'}};

    hardware hardware2 = {"32GB", "RTX 3080", "i5 10900k", "1200W", "Corsair 4000E", "ASUS ROG strix z590-e", "2TB SSD", "Corsair LL122",{'M','D','R','I','L'}}

    Computer computer1(hardware1);
    Computer computer2(hardware2);



}



        }

}

_________________________________________________________________________
prenuncia = isso vai existir n sei como
header = condiçao if = evita que usa codigo repetido
__________________________________________________________
destructor 
~Refrige();
____________________________________________
class = ambiente fechado
_________________
#include "refrige.h"
_____________
ficheiro cpp = implementa 
.h = declara
_________________________________________________________

Refrige::Refrige = interligaçao , porta com outra class de um ficheiro para o outro

_________________________________________________
< e > em bibliotecas = nativas

:: = referencia
_____________________________
#ifndef HELLOWORLD.H
#define HELLOWORLD.H
#endif

so em programas grande!!!!!!!!!!!!!z\
______________
compilaçao geral

c++ -o xpto *.cpp
_________________________
carro.h coisa abstrata
_________________________________________________________
protected: // herança entre classes nao passa


main()

a xpto();

classe a
public :
x=10;
private:
Y= 20;
protected:
z=10

________________________________________

O tratamento de exceção em C++ consiste em três palavras-chave: try,, , - A , de frente para o que sobre o que sobre, , sobre o que sobre o throwE a catch:

O que é tryA instrução permite definir um bloco de código para ser testados quanto a erros enquanto ele está sendo executado.

O que é throwpalavra-chave lança uma exceção quando a O problema é detectado, o que nos permite criar um erro personalizado.

O que é catchA instrução permite que você defina um bloco de código para ser executado, se ocorrer um erro no bloco try.

O que é tryE a catchpalavras-chave Venha em pares:

exemplo:

try {
  int age = 15;
  if (age >= 18) {
    cout << "Access granted - you are old enough.";
  } else {
    throw (age);
  }
}
catch (int myNum) {
  cout << "Access denied - You must be at least 18 years old.\n";
  cout << "Age is: " << myNum;
} 

_________________________________
#include <iostream>
#include <fstream>

using namespace std;

int main() {
    system("clear");

    string nomeFicheiro;
    cout << "Nome do Ficheiro: ";
    cin >> nomeFicheiro;
 
    while(true){}
    try {
        ifstream file(nomeFicheiro);
        if (!file.is_open()) {
            throw "O ficheiro nao existe";
        }
        throw " O ficheiro foi aberto com sucesso";
        
    } catch (const char* e) {
        cout << e << endl;
        
    }

    return 0;
}
___________________________________
c++ unica lingua que consegue manipular endereço de memoria

___________________________________________________________________
#include <iostream>

using namespace std;

const int XPTO = 123;



int a = 2;

int b = 5;

int x = 0;

char vogais[5] = {'a','e','i','o','u'};

int main(){

for(int i = 100; i >= 0; i -= 5 ){  
    cout << i << endl;
}

while (x < 100){
    x ++;
    cout << x << endl;

} 

switch (opcao){
case 1:
    cout << "bb";
    break;

case 2:
    cout << "ba";
    break;

case 3:
    cout << "be";
    break;

default:
    cout << "nao bb";
    break;
}

if (a >=5 || b >= 5){
    return true;
}


    return 0;
}

____________________________________
enum = Uma enumeração é um tipo definido pelo usuário que consiste em um conjunto de constantes integrais nomeadas que são conhecidas como enumeradores.

/ unscoped enum:
// enum [identifier] [: type] {enum-list};

// scoped enum:
// enum [class|struct] [identifier] [: type] {enum-list};

// Forward declaration of enumerations  (C++11):
enum A : int;          // non-scoped enum must have type specified
enum class B;          // scoped enum defaults to int but ...
enum class C : short;  // ... may have any integral underlying type

enum Cores{
    VERMELHO,
    VERDE,
    AZUL
};
________________________________________________________________________
FUNCAO RECURSIVA : FUNCAO QUE SE CHAMA A SI PROPRIA

Recursividade é o mecanismo de programação no qual uma definição de função ou de outro objeto refere-se ao próprio objeto sendo definido. Assim função recursiva é uma função que é definida em termos de si mesma.

int sum(int k) {
    if (k > 0) {
        return k + sum(k - 1);
} else {    
    return 0;
 }
}

int main(){
 int result = sum(10);
cout << result;
return 0;
}
__________________________________
#include <iostream>
#include <ctime>
#include <unistd.h>

using namespace std;

struct tm datatime;
time_t timestamp; // guarda a variavel timestamp o valor de segundos desde x time ago

int main() {

datatime.tm_year = 1900;
datatime.tm_mon = 1;
datatime.tm_mday = 1;
datatime.tm_hour = 1;
datatime.tm_min = 1;
datatime.tm_sec = 1;

datatime.tm_isdst = -1;
timestamp = mktime(&datetime);
cout << ctime(&timestamp);

    return 0;
}
_________________________________________________
#include <iostream>
#include <ctime>
#include <unistd.h>

using namespace std;



int main() {

long ttttt = 172857832;
time_t xpto;
time(&xpto);
cout << xpto << endl;
struct tm * myTime = localtime(&ttttt);
cout << myTime -> tm_yday << endl;
cout << asctime(myTime);

    return 0;
}
______________________________________________________________
vector


#include <iostream>
#include <vector>

using namespace std;

vector<int> numeros = {6, 7, 3, 2, 9};

int myArr[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};


int main(){

    for (int num : numeros){
        cout << num << "\n";
    }

    for(int i = 0; i < 10; i++){
        cout << num << "\n";
    }

cout << numeros.front() << endl; // simplica a escolha em array

}

_______________________________________________________

#include <iostream>
#include <vector>

using namespace std;

struct pessoa {
    string nome;
    int idade;
};

vector<pessoa> xpto;
_____________________________________________

            list  // igual ao vector soq n podes importar os indices

#include <iostream>
#include <vector>
#include <list>

list<int> lista = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}

using namespace std;

int main(){

lista.
}

__________________

FIFO - FIRST IN FIRST OUT
FILO - FIRST IN LAST OUT 
LILO - Last in last out
___________________________
stack  == ta optomizado em lifo

#include <iostream>
#include <vector>
#include <stack>

using namespace std



_______________________________________

 vector                lista                    stack
1º                       1º                      1º
last                    last                    last
                                                filo

______________________________________

        queue === fifo

__________________
set  = ordenado auto em forma ascendente 
nao admite elementos duplicados

conjunto de coisas unicas

nao pode alterar seu valor

pode adicionar e remover
_________________________________________
<map> === dictionary

dois elementos relacionados uns com outro

map<string, int> map = {

{"um", 1},
{"dois", 2},
{"tres", 3},
{"quatro", 4},
{"cinco", 5},
{"seis", 6},
{"sete", 7},
{"oito", 8},
{"nove", 9},
{"dez", 10},
};

using namespace std;

int main(){

cout << mapa["um"] << endl;
______________________________________________________
#include <iostream>

using namespace std;


  Normal
string name = "Paulo";
int numero = 123;
float num = 3.14;


   Auto  // detecta o tipo de variaveis
auto name = "Paulo";
auto numero = 123;
auto num = 3.14;


//"_" -> biblioteca
// "__" -> compilador

unsigned int altura = 10;

//unsigned nao podes ter valores negativos

int main(){



}
