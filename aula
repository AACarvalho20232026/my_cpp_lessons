int O_MEU_NUMERO = 10 ;         //número inteiros
double O_MEU_NUMERO_REAL =10.5; //número reias
char O_MEU_CARACTER = 'a';     //caracteres
string O_MEU_TEXTO = "isto é um texto";  //texto
bool O_MEU_BOOLDEANO = true;            //booleanto
const double PI = 3.14159265389793238463; //constantes  
int x = 2, y=3 <=14
int minutosPorHora
//tipo de variavel nome da variavel = valor da variavel 
..............................................................................................................................................................................................................
int sensorTemperatura =10;
const double PI = 3.1415;

cout  << PI << " valor de PI\n";  //isto é um comentario 
    cout << sensorTemperatura << " valor sensor de temperatura\n"

    sensorTemperatura = 20;
    cout << sensorTemperatura << "valor do sensor de temperatura" << PI 
    return 0;

cout << "Digita um numero: " ;  //imprime no ecrã
   cin >> numero;                   //lê do teclado 
   cout << "O numero que digitaste foi; " << numero << endl;
#include <iostream>
using namespace std;




//tipo de variavel nome da variavel = valor da variavel 


int main()
{
      //tendo em consideração que a area do circulo
      //é PI * raio * raio, calcular a area do circulo
      //com raio 10
      const double PI = 3.14159265389793238463
      int r = 10;
      double area = PI * r * r;
   cout << a+b << endl;   //imprime no ecrã
   //cin >> numero;                   //lê do teclado 
   //cout << "O numero que digitaste foi; " << numero << endl;
   return 0;
}
const double PI = 3.14159265389793238463
      int raio;
      cout << "Qual o raio do circulo?" << endl;
      cin >> raio;
      double area = PI * raio * raio;
      int a = 4;
      int b = 5;
      int c = 2 ;
      int d = 1;
      int resultado = a+(b*c)+d;
      cout << resultado << endl;
      int resultado = a/c;
      int resultado = a%c;
int resultado = a+=2;
      cout << resultado << endl;
       resultado = a+=2 ;
      cout << resultado << endl;
...............................................................................................................................................................................................................

 #include <cmath>
#include <iostream>  //incluir uma bibliotece
#include <cmath>     //incluir uma bibliteca cheia de cenas de mat
using namespace std;

int a=2, b=3;


int main(){

   cout << max(a,b)  << endl;
   return 0;
}
#include "asminhascontas.h"
cout << log(16)  << endl;
   cout << f(2) << endl;
int f(int x){
    int resp = 2*x;
    return resp;
..............................................................................................................................................................................................................
      #include <iostream>
using namespace std;

int a = 10 , b = 12;

int main(){

    if ( a < b){
        cout << "é verdade" <<endl;

    }else{
        cout << "é mentira" << endl;
    
    }

    return 0;
..............................................................................................................................................................................................................
int a = 10 , b = 12, c = 9;

int main(){

    if ( a < b && b < c){
if ( a < b ){
        cout << "é verdade" <<endl;
    }else if (a<c){
        cout << "é verdade" <<endl;
    }else{
        cout << "é mentira" << endl;
.................................................................................................................
#include <iostream>
#include <ctime>
#include <cstdlib>

using namespace std;

int main(){

int num=0;
   srand((unsigned) time(0));
   int numSorte = 1+(rand()%100);  
   while(numSorte != num){
     cout << "Qual o número da sorte? ";
     cin >> num;
     if(numSorte > num){
     cout << "O número da sorte é maior do que: " << num << endl;
     }else if(numSorte < num){
     cout << "O número da sorte é menor do que: " << num << endl;
     }else{
     cout << "Parabéns, você acertou!" << endl;
    }
  }
cout << "Acabou o jogo!" << endl;
return 0;
}
.................................................................................................................
#include <iostream>
using namespace std;


int main(){

    for (int n=0; n<=10; n++){
        cout << n << endl;
    }

    return 0;
..............................................................................................................................................................................................................

int i = 10;
    while (1 !=10){
        cout << "ola" << endl;

do {   
        cout << "ola" << endl;
   } while (1 != 10);

cout << "inicio do ciclo For" <<endl;
for (int n=0; n<=10; n++){
    cout << n << endl;
    if (n == 4){
        break;
.............................................................................................................................................................................................................
cout << "inicio do ciclo For" <<endl;
for (int n=0; n<=10; n++){
    cout << n << endl;
    if (n == 4){
        continue;
    }    
    
}
    cout << "fim do ciclo For" << endl;
    return 0;
..............................................................................................................................................................................................................
    int main(){

    int test[4] = {7,8,9,7};   //int chave[5]
                                //int estrelas[2]
    for(int i=0; i<4; i++){
        cout << test[i] << endl;
    }


return 0;

}
.............................................................................................................................................................................................................
int main(){

   int chave[5];
    int estrelas[2];

    for(int i=0; i<4; i++){
        cout << test[i] << endl;
    }
..............................................................................................................................................................................................................
int main(){
 // indice             0        1       2       3          4
   string cars[] = {"volvo", "BMW", "ford", "mazda", "tesla"};
    cout << cars[2] << "\n";
    cars[2] = "Opel";
    cout << cars[2] << "\n";

    

    cout << cars[2] << "\n";

int main(){
 
 int numeros[] = {1,2,3,4,5};
 cout << sizeof(numeros)/4 << endl;
// cada elemento de um array = 4 bytes
.............................................................................................................................................................................................................
                                                                                   Array
    
    #include <iostream>
using namespace std;

int myArray[] = { 1, 2, 3, 4, 5 };

int main (){

    cout << myArray[4] << endl;
    cout << sizeoff(myArray)/4 << endl;

    return 0;
}
.............................................................................................................................................................................................................
                                                                                    Array
    
    #include <iostream>
using namespace std;

int myArray[] = { 1, 2, 3, 4, 5 };

string letras [2][4]; //bidimencional

string letras2[2][4] = {
    {"A","B","C","D"}, //0
    {"E","F","G","H"}  //1
    //0   1   2   3
};

int main (){

    for (int i = 0; i < 2; i++){
        for (int j = 0; j < 4; j++){
    cout << letras2[i][j] << endl;
    }
}
return 0;
}
.............................................................................................................................................................................................................
                                                                                    struct
    #include <iostream>
using namespace std;


struct
{
    string nome;
    int idade;
    string codPostal;
    string rua;
    string cidade;
    string pais;

} pessoa;

int main(){

    pessoa.nome = "Joao";
    pessoa.idade = 20;
    pessoa.codPostal = "1234-567";
    pessoa.rua = "Rua Do Joao";
    pessoa.cidade = "Porto";
    pessoa.pais = "Portugal";


}
........................................................................................................................................................................................
    int main(){

    pessoa p1, p2, p3;

    p1.nome = "Joao";
    p2.nome = "Maria";

    cout << p1.nome << endl;
    cout << p2.nome << endl;
    cout << p3.nome << endl;


}
........................................................................................................................................................................................
                                                                                        funçoes
    
    int f(int x){
    return x*x;
};

int main(){

    cout << f(5) << endl;
    cout << f(10) << endl;
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
int f(int x){
    return x*x;
};

void ola(){
    cout << "Olá!" << endl;
};

void msgError(string msg){
    cout << "------------------------" << endl;
    cout << "Erro: " << msg << endl;
    cout << "------------------------" << endl;
int main(){
    ola();

    msgError("Erro De Conexao")
    ou
texto("Olá", "Mundo", "!");

int multiplicaçao(int x, int y){
    return x*y;
}

int main(){


    cout << multiplicaçao(2,256) << endl;

int multiplicaçao(int x, int y=2){
    return x*y;
}

int main(){


    cout << multiplicaçao(2) << endl;

const int LED_RED = A5;
const int LED_YEL = A4;
const int LED_GRE = A3;
const long INTERVALO = 2000;

void setup()
{
  pinMode(LED_RED, OUTPUT);
  pinMode(LED_YEL, OUTPUT);
  pinMode(LED_GRE, OUTPUT);
}

void loop()
{
  digitalWrite(A5, HIGH);
  delay(2000);
  digitalWrite(A5, LOW);
  delay(2000);

  digitalWrite(A4, HIGH);
  delay(2000);
  digitalWrite(A4, LOW);
  delay(2000);
  
  digitalWrite(A3, HIGH);
  delay(2000);
  digitalWrite(A3, LOW);
  delay(2000);


  digitalWrite(A5, HIGH);
    delay(INTERVALO);
  digitalWrite(A5, LOW);
  digitalWrite(A4, HIGH);
    delay(INTERVALO);
  digitalWrite(A4, LOW);
  digitalWrite(A3, HIGH);
    delay(INTERVALO);
  digitalWrite(A3, LOW);
.......................................................................................
Semaforo

const int LED_RED_1 = 2;
const int LED_YEL_1 = 3;
const int LED_GRE_1 = 4;
const int LED_RED_2 = 5;
const int LED_YEL_3 = 6;
const int LED_GRE_4 = 7;

const long INTERVALO_SEG = 6000;
const long INTERVALO = 5000;

void setup()
{
  pinMode(LED_RED_1, OUTPUT);
  pinMode(LED_YEL_1, OUTPUT);
  pinMode(LED_GRE_1, OUTPUT);
  pinMode(LED_RED_2, OUTPUT);
  pinMode(LED_YEL_3, OUTPUT);
  pinMode(LED_GRE_4, OUTPUT);
}

void loop()
{
  digitalWrite(LED_RED_1, HIGH);
  digitalWrite(LED_RED_2, HIGH);
  delay(INTERVALO);
  digitalWrite(LED_RED_1, LOW);
  digitalWrite(LED_RED_2, LOW);

  digitalWrite(LED_YEL_1, HIGH);
  digitalWrite(LED_YEL_3, HIGH);
  delay(INTERVALO);
  digitalWrite(LED_YEL_1, LOW);
  digitalWrite(LED_YEL_3, LOW);

  digitalWrite(LED_GRE_1, HIGH);
  digitalWrite(LED_GRE_4, HIGH);
  delay(INTERVALO_SEG);
  digitalWrite(LED_GRE_1, LOW);
  digitalWrite(LED_GRE_4, LOW);
}
...............................................................................................................
int val = analogRead(A1);
  val = map(val, 0, 1023, 255, 0);
  analogWrite(3, val);
...........................................................................
Reference

//Reference is an alias for a variable
string food = "Pizza";
//Create a Reference variable
string &meal = food;
int main(){
    cout << food << "\n";
    cout << &food << "\n";
    cout << meal << "\n";
    cout << &meal << "\n";
    
    return 0;
}
........................................................................................................
pointer

int main(){
    string food = "Pizza";
    string *ptr = &food;
    cout << food << "\n";
    cout << &food << "\n";
    cout << ptr << "\n";
    cout << *ptr << "\n";
    cout << &ptr << "\n";
.............................................................
revisoes 

#include <iostream>
using namespace std;

int main(){

    int x = 1;
    int y = 2;
    cout << x << "\n";
    x +=2;
    cout << x << "\n";
    cout << (x!=y) << "\n";
    cout << (x==y) << "\n";

     //   &&        ||   !   == ! < > <= >=
   // comparacao    ou   neg

    string nomea = "Paulo ";
    string nomeb = "Leite";
    cout << nomea+nomeb << "\n";

}
cout << round(10.4) << "\n";
....................................
funcoes

int somaNumeros(int x, int y){
return x+y;
}

double somaNumeros (double x, double y){
    return x+y;
}

int soma(int k){
    if (k>0){
            return k+ soma(k - 1);
        }else{
            return 0;
        }
}



int main(){

    cout << somaNumeros(2.2,6.4) << "\n";
    return 0;

}
.........................................
//int: 4 bytes (32 bits) 00000000 00000000 00000000 00000000
// char: 1 byte (8 bits) 00000000
// bool : 1 byte (8 bits) 00000000 (false) 00000001 (true)
// float: 4 bytes (32 bits) 00000000 00000000 00000000 00000000
// double: 8 bytes (64 bits) 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
#include <iostream>
#include <fstream>
#include <vector>
#include <cstdlib>
#include <ctime>
#include <algorithm>

using namespace std;

// Função para gerar números aleatórios
int gerarNumeroAleatorio(int min, int max) {
    return rand() % (max - min + 1) + min;
}

// Função para criar um cartão de bingo
vector<vector<int>> criarCartaoBingo() {
    vector<vector<int>> cartao(5, vector<int>(5, 0));

    for (int i = 0; i < 5; ++i) {
        for (int j = 0; j < 5; ++j) {
            int numero;
            do {
                numero = gerarNumeroAleatorio(j * 15 + 1, (j + 1) * 15);
            } while (find(cartao[i].begin(), cartao[i].end(), numero) != cartao[i].end());
            cartao[i][j] = numero;
        }
    }

    return cartao;
}

// Função para mostrar um cartão de bingo
void mostrarCartao(const vector<vector<int>>& cartao) {
    for (int i = 0; i < 5; ++i) {
        for (int j = 0; j < 5; ++j) {
            if (cartao[i][j] == 0) {
                cout << "   ";
            } else {
                cout << (cartao[i][j] < 10 ? " " : "") << cartao[i][j] << " ";
            }
        }
        cout << endl;
    }
}

// Função para salvar um cartão em um arquivo
void salvarCartao(const vector<vector<int>>& cartao, int numeroCartao) {
    ofstream arquivo("cartao_" + to_string(numeroCartao) + ".txt");

    for (int i = 0; i < 5; ++i) {
        for (int j = 0; j < 5; ++j) {
            arquivo << (cartao[i][j] == 0 ? "X" : to_string(cartao[i][j])) << " ";
        }
        arquivo << endl;
    }

    arquivo.close();
}

int main() {
    srand(static_cast<unsigned int>(time(nullptr)));

    int opcaoSorteio;
    cout << "Escolha o tipo de sorteio (75, 90 ou 100): ";
    cin >> opcaoSorteio;

    vector<int> numerosSorteados;
    int opcao;
    cout << "Escolha o modo de sorteio (0 - Automático, 1 - Manual): ";
    cin >> opcao;

    int numeroAnterior = -1;

    while (true) {
        int numeroSorteado;

        if (opcao == 0) {
            numeroSorteado = gerarNumeroAleatorio(1, opcaoSorteio);
        } else {
            cout << "Pressione qualquer tecla para sortear um novo número...";
            cin.ignore();
            cin.get();
            numeroSorteado = gerarNumeroAleatorio(1, opcaoSorteio);
        }

        // Exibir números sorteados
        cout << "Número sorteado: " << numeroSorteado << endl;
        cout << "Número anterior: " << numeroAnterior << endl;

        numerosSorteados.push_back(numeroSorteado);
        sort(numerosSorteados.begin(), numerosSorteados.end());

        cout << "Números sorteados: ";
        for (int num : numerosSorteados) {
            cout << num << " ";
        }
        cout << endl;

        numeroAnterior = numeroSorteado;

        // Criar cartões de bingo
        int numeroCartoes;
        cout << "Quantos cartões de bingo desejas gerar? ";
        cin >> numeroCartoes;

        for (int i = 1; i <= numeroCartoes; ++i) {
            vector<vector<int>> cartao = criarCartaoBingo();
            mostrarCartao(cartao);
            salvarCartao(cartao, i);
        }
    }

    return 0;
}
....................
#include <iostream>
#include <iomanip>
#include <cstdlib>
#include <ctime>
#include <unistd.h>

using namespace std;

const int numLinhasCartao       = 5;
const int numColunasCartao      = 5;
const int numColunasPainel      = 20:
const int intervaloEntreBolas   = 500000;
const int msgPause              = 2000000;

int sorteados           = 0;
int numeroSorteado      = 0;
int anterior            = 0;

int numeroDeBolas, tipoSorteio , numeroDeCartoes;

string red          = "\u001b[31m";
string blue         = "\u001b[34m";
string green        = "\u001b[32m";
string reset        = "\u001b[0m";
string bold         = "\u001b[1m";

typedef struct {
    int numero;
    bool sorteado;
} bingoPainel;

bingoPainel bingo[] = {};

void CenterString(string mensagem){
    int l = mensagem.length();
    int pos = (int) ((numColunasPainel*3 - (l)) / 2);
    for (int i = 0; i < pos; i++){
        cout << " ";
    }
    cout << blue;
    cout << mensagem << reset;
    cout << blue << endl;
}

void initArray(){
    for (int i = 0; i <= numeroDeBolas; i++){
        bingo[i].numero = i+1;
        bingo[i].sorteado = false;
    }
}
    
void opcoes(){
    tipoSorteio = 0;

    while (tipoSorteio != 1 && tipoSorteio != 2 && tipoSorteio != 3 && tipoSorteio != 4){
    system("clear || cls");
    cout << blue << bold
                << "M E N U   P R I N C I P A L\n " << reset << blue
                << "----------------------------" << endl
                << "1 - Sorteio Manuel\n"
                << "2 - Sorteio Automático\n"
                << "3 . Gerar cartoes\n"
                << "4 - Sair\n"
                << "............................" << endl
                << bold << "Opção: " << reset << blue;
            cin >> tipoSorteio;
    }
}

void showOption(){
    if (tipoSorteio < 1 || tipoSorteio > 4){


    }


}
....................
#include <iostream>
#include <cstdlib> // Para a função rand()

using namespace std;

// Função para preencher uma matriz quadrada de inteiros com valores aleatórios
void preencherMatrizAleatoria(int** matriz, int ordem) {
    for (int i = 0; i < ordem; ++i) {
        for (int j = 0; j < ordem; ++j) {
            matriz[i][j] = rand() % 100; // Gera valores aleatórios entre 0 e 99
        }
    }
}

// Função para encontrar a linha com o menor valor na matriz
int encontrarLinhaComMenorValor(int** matriz, int ordem) {
    int menorValor = matriz[0][0];  // Assume que o primeiro elemento é o menor
    int linhaMenorValor = 0;

    for (int i = 0; i < ordem; ++i) {
        for (int j = 0; j < ordem; ++j) {
            if (matriz[i][j] < menorValor) {
                menorValor = matriz[i][j];
                linhaMenorValor = i;
            }
        }
    }

    return linhaMenorValor + 1; // Adiciona 1 para exibir a linha no formato convencional (começando em 1)
}

int main() {
    // Solicita ao usuário a ordem da matriz (número de linhas e colunas)
    int ordem;
    cout << "Digite a ordem da matriz quadrada: ";
    cin >> ordem;

    // Aloca dinamicamente a matriz
    int** matriz = new int*[ordem];
    for (int i = 0; i < ordem; ++i) {
        matriz[i] = new int[ordem];
    }

    // Preenche a matriz com valores aleatórios
    preencherMatrizAleatoria(matriz, ordem);

    // Chama a função para encontrar a linha com o menor valor
    int linhaMenorValor = encontrarLinhaComMenorValor(matriz, ordem);

    // Imprime a matriz gerada
    cout << "Matriz gerada automaticamente:" << endl;
    for (int i = 0; i < ordem; ++i) {
        for (int j = 0; j < ordem; ++j) {
            cout << matriz[i][j] << " ";
        }
        cout << endl;
    }

    // Imprime o resultado
    cout << "A linha com o menor valor é a linha " << linhaMenorValor << "." << endl;

    // Libera a memória alocada para a matriz
    for (int i = 0; i < ordem; ++i) {
        delete[] matriz[i];
    }
    delete[] matriz;

    return 0;
}

array tridimensional para cartoes
int cartoes[numeroDeCartoes][numLinhasCartao][numColunasCartao];
.........................................................................
/**
 * Crie um programa capaz de multiplicar uma
 * matriz bidimensional de inteiros por
 * um dado número e criar uma nova matriz com o
 * produto
 * 
*/
...............................................................................
#include <iostream>
#include <stdio.h>
#include <stdlib.h>

using namespace std;

int main(){
   // printf("teste\n");
   // printf("Characters: %s %s %s \n", "ey", "ty", "teste");
   // printf ("Decimals: %d %ld\n", 1977, 650000L);            // converte um int decimal para float/double porque excede o num 9
   // printf ("Preceding with blanks: %10d \n", 1977);         // vai imprimir 10 espaços e dps o numero solicitado que neste caso é o 1977
   // printf ("Width trick: %*d \n", 10, 10);                  // vai imprimir "X" Espaços de acordo com o parametro fornecido e depois da print de um nemero
    
    char nome[50];
    string str;
    int i;

   

   // printf("Nome: ");            
   // scanf("%s", nome);              // vai receber uma string "%s" e dps de receber esse valor vai mandar pra variavel sugerida "nome"
   // printf("Ola %s\n", nome);       // vai dar um output no qual vai esperar uma string e dps esse valor e atribuido pela variavel nome
 
    system("clear")
   

    printf("Enter your family name:  ");
    scanf ("%s",str);
    printf("Enter your age  ");
    scanf ("%d", &i);
    printf ("Mr. %s , %d years old.\n", str, i );

    /*
    d or i-	Signed decimal integer - 392
    u-	Unsigned decimal integer  -	7235
    o-	Unsigned octal - 610
    x-	Unsigned hexadecimal integer -	7fa
    X-	Unsigned hexadecimal integer (uppercase) -	7FA
    f-	Decimal floating point, lowercase -	392.65
    F-	Decimal floating point, uppercase -	392.65
    e-	Scientific notation (mantissa/exponent), lowercase - 3.9265e+2
    E-	Scientific notation (mantissa/exponent), uppercase - 3.9265E+2
    g-	Use the shortest representation: %e or %f - 392.65
    G-	Use the shortest representation: %E or %F - 392.65
    a-	Hexadecimal floating point, lowercase -	-0xc.90fep-2
    A-	Hexadecimal floating point, uppercase -	-0XC.90FEP-2
    c-	Character -	'a'
    s-	String of characters -	"sample"
    p-	Pointer address  -	b8000000
    n-	Nothing printed.
    {The corresponding argument must be a pointer to a signed int.
    {The number of characters written so far is stored in the pointed location.	
    %-	A % followed by another % character will write a single % to the stream. -	%
    
    
    
    
    
    
    
    
    */
    
}
....................................................................................................................................
#include <iostream>

using namespace std;

void soma(int a, int b) {
    cout << a + b << endl;
}

void multi(int a, int b) {
    cout << a * b << endl;
}

void divi(int a, int b) {
    if (b != 0) {
        cout << a / b << endl;
    } else {
        cout << "Error: Cannot divide by zero." << endl;
    }
}

void Rest(int a, int b) {
    if (b != 0) {
        cout << a % b << endl;
    } else {
        cout << "Error: Cannot find the remainder for division by zero." << endl;
    }
}

void menu() {
    system("clear");  // Corrected syntax for clearing the screen
    cout << "====================" << endl;
    cout << "          MENU" << endl;
    cout << "====================" << endl;
    cout << "1 - soma" << endl;
    cout << "2 - multiplicacao" << endl;
    cout << "3 - divisao" << endl;
    cout << "4 - resto da divisao" << endl;
    cout << "====================" << endl;
}

int getOpcao() {
    int opcao;
    cout << "Digite a sua opcao: ";
    cin >> opcao;

    return opcao;
}

int getValorX() {
    int x;
    cout << "Digite o valor de x: ";
    cin >> x;

    return x;
}

int getValorY() {
    int y;
    cout << "Digite o valor de y: ";
    cin >> y;

    return y;
}

void executaCalculo(int opcao, int x, int y) {
    switch (opcao) {
        case 1:
            soma(x, y);
            break;

        case 2:
            multi(x, y);
            break;

        case 3:
            divi(x, y);
            break;

        case 4:
            Rest(x, y);
            break;

        default:
            cout << "Opcao invalida." << endl;
    }
}

int main() {
    int a, b, opcao;
    menu();
    opcao = getOpcao();
    a = getValorX();
    b = getValorY();
    executaCalculo(opcao, a, b);

    return 0;
}
.......................................................................
#include <iostream>

using namespace std;

void soma(int a, int b) {
    cout << a + b << endl;
}

void multi(int a, int b) {
    cout << a * b << endl;
}

void divi(int a, int b) {
    if (b != 0) {
        cout << a / b << endl;
    } else {
        cout << "Error: Cannot divide by zero." << endl;
    }
}

void Rest(int a, int b) {
    if (b != 0) {
        cout << a % b << endl;
    } else {
        cout << "Error: Cannot find the remainder for division by zero." << endl;
    }
}

void menu() {
    system("clear");  // Corrected syntax for clearing the screen
    cout << "====================" << endl;
    cout << "          MENU" << endl;
    cout << "====================" << endl;
    cout << "1 - soma" << endl;
    cout << "2 - multiplicacao" << endl;
    cout << "3 - divisao" << endl;
    cout << "4 - resto da divisao" << endl;
    cout << "====================" << endl;
}

int getOpcao() {
    int opcao;
    cout << "Digite a sua opcao: ";
    cin >> opcao;

    return opcao;
}

int getValorX() {
    int x;
    cout << "Digite o valor de x: ";
    cin >> x;

    return x;
}

int getValorY() {
    int y;
    cout << "Digite o valor de y: ";
    cin >> y;

    return y;
}

void executaCalculo(int opcao, int x, int y) {
    switch (opcao) {
        case 1:
            soma(x, y);
            break;

        case 2:
            multi(x, y);
            break;

        case 3:
            divi(x, y);
            break;

        case 4:
            Rest(x, y);
            break;

        default:
            cout << "Opcao invalida." << endl;
    }
}

int main() {
    int a, b, opcao;
    menu();
    opcao = getOpcao();
    a = getValorX();
    b = getValorY();
    executaCalculo(opcao, a, b);

    return 0;
}
..............
#include <iostream>

using namespace std;

void calculos(){
    int a, b;
    double r;
    const double PI = 3.1416;

    do {
        cout << "Type a number: ";
        cin >> a;
        if (a <= 0){
            cout << "You must type a number bigger than 0!" << endl;
        }
    } while (a <= 0);

    do{
        cout << "Type another number: ";
        cin >> b;
        if (b <= 0){
            cout << "You must type a number bigger than 0!" << endl;
        }
    } while (b <= 0);

    cout << "Sum: " << a + b << endl;
    cout << "Difference: "<< a - b << endl;
    cout << "Multiplication: " << a * b << endl;
    cout << "Division: "<< a / b << endl;
    cout << "Rest of Division: " << a % b << endl;

    cout << "Type the value of the radius: ";
    cin >> r;
    cout << "The area of the circle: " << PI * (r * r) << endl;

}


void notas(){

    int nums[10] = {10, 5, 9, 4, 92, 52, 62, 16, 81, 44};
    float grades[5], high_comparision_num = grades[0], low_comparision_num = grades[0], high_comparision_num_2 = nums[0], low_comparision_num_2 = nums[0], Average, Average_2, sum = 0, sum_2 = 0;
    
    
    for(int g = 0 ; g < 5 ; g++){
        cout << "Type the grade for student " << g + 1 << ": ";
        cin >> grades[g];
        sum += grades[g];
        Average = sum / 5;
    }
    cout << "Average grade: " << Average << endl;

    for(int x = 0 ; x < 5 ; x++){
        if(grades[x] > high_comparision_num){
            high_comparision_num = grades[x];
        }
    }
    cout << "Highest grade: " << high_comparision_num << endl;

    for(int x = 0 ; x < 5 ; x++){
        if(grades[x] < low_comparision_num){
            low_comparision_num = grades[x];
        }
    }
    cout << "Lowest grade: " << low_comparision_num << endl;

    for(int g = 0 ; g < 10 ; g++){
        sum_2 += nums[g];
        Average_2 = sum_2 / 10;
    }
    


    for(int x = 0 ; x < 10 ; x++){
        if(nums[x] < low_comparision_num_2){
            low_comparision_num_2 = nums[x];
        }
    }


    for(int x = 0 ; x < 10 ; x++){
        if(nums[x] > high_comparision_num_2){
            high_comparision_num_2 = nums[x];
        }
    }

    cout << endl;
    cout << "Average grade: " << Average_2 << endl;
    cout << "Highest grade: " << high_comparision_num_2 << endl;
    cout << "Lowest grade: " << low_comparision_num_2 << endl;

}

void tabuada(){
    int n;
    cout << "Chose a number: ";
    cin >> n;

    for(int x = 1; x <= 10; x++){
        cout << x << " * " << n << " = " << x * n << endl;
    }
}

void menu(){
    int option;

    cout << "=======================" << endl;
    cout << "          MENU" << endl;
    cout << "=======================" << endl;
    cout << "Chose an option:\n";
    cout << "1. Calculator \n2. Grades \n3. Multiplication Table \n";
    cin >> option;

    switch (option){
        case 1:
            calculos();
            break;

        case 2:
            notas();
            break;
        
        case 3:
            tabuada();
            break;;

        default:
            cout << "You must type a number between 1-3 !\n";
            break;

    } 
}



int main(){
    
    menu();
    return 0;
}





